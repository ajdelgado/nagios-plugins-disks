#!/bin/bash
# $Id: check_smart_all_disks,v 1.23 2014/03/10 10:48:06 oernii Exp $

[[ $(id -u) -ne 0 ]] && echo "$0 needs to run as root to read SMART data." && exit 3

if [ "${1}" == "-d" ]; then
  DEBUG=1
  shift
else
  DEBUG=0
fi
DEVS=$(find /dev/disk/by-id/ -not -iname '*part*' -and -not -iname '*QEMU_DVD-ROM*' -and -not -iname '*dm-*' -and -not -iname '*lvm-*' -and -not -iname '*md-*' -ls | grep ' ->' |gawk  '{print $13}' | cut -f3 -d/ | sed -e 's/\(.*\)/\/dev\/\1/'|sort -u)

if [ -f /etc/nagios/check_smart_devs ]
then
  # shellcheck disable=SC1091
  source /etc/nagios/check_smart_devs
  # Example for SATA disks on MeraRaid
  # DEVS="/dev/sda /dev/sdb /dev/sdc /dev/sdd /dev/sde /dev/sdf /dev/sdg /dev/sdh"
  
  # Example for cciss devices:
  # DEVS=/dev/disk/by-id/scsi-3600508b1001ca3f8143d49dd19bd2e1d
  # DEVS="$DEVS /dev/disk/by-id/scsi-3600508b1001ca3f8143d49dd19bd2e1d"
  # DEVS="$DEVS /dev/disk/by-id/scsi-3600508b1001ca3f8143d49dd19bd2e1d"
  # DEVS="$DEVS /dev/disk/by-id/scsi-3600508b1001ca3f8143d49dd19bd2e1d"
  # DEVS="$DEVS /dev/disk/by-id/scsi-3600508b1001ca3f8143d49dd19bd2e1d"
  # DEVS="$DEVS /dev/disk/by-id/scsi-3600508b1001ca3f8143d49dd19bd2e1d"
  # DEVS="$DEVS /dev/disk/by-id/scsi-3600508b1001ca3f8143d49dd19bd2e1d"
  # DEVS="$DEVS /dev/disk/by-id/scsi-3600508b1001ca3f8143d49dd19bd2e1d"
  # 
  # RAIDDEVS=8
  # RAIDTYPE=cciss

fi
#DEVS=/dev/sda
OUT=$(mktemp)
ERRORDEVICES=''
NAGIOS_OUTPUT=$(mktemp)
SMARTCTL=smartctl

function join_by {
  local d=${1-} f=${2-}
  if shift 2; then
    printf %s "$f" "${@/#/$d}"
  fi
}

function check_ata_error_count()
{
  $SMARTCTL --quietmode=errorsonly --log=error "${1}" > "${OUT}"

  if [[ $(wc -l "${OUT}" |awk '{print($1)}') -eq 0 ]]; then
    echo 0
  else
    {
    echo ""
    echo "ATA Error log: ${1} [${devcnt}]"
    cat "${OUT}"
    } >> "${NAGIOS_OUTPUT}"
    NUM=$(grep 'Error Count:' "${OUT}" | sed -e 's/^.*Error Count: \([0-9]*\).*/\1/g')
    #device_info $1
    echo "${NUM}"
  fi
  
}

function check_health() 
{
  RET=$($SMARTCTL -H "${1}" | grep -vq ": PASSED")
  echo $?
}

function check_attribute()
{
  LINE=$($SMARTCTL -A "${1}" | grep "${2}")
  RET=$(echo "${LINE}" | gawk '{print $10}')
  if [[ $RET -gt 0 ]]; then
    echo "" >> "${NAGIOS_OUTPUT}"
    echo "${1}" ["${devcnt}"] "${LINE}" >> "${NAGIOS_OUTPUT}"
    #device_info $1 >> "${NAGIOS_OUTPUT}"
  fi
  echo "${RET}"
}

function device_info() 
{
  echo ""
  echo "${1}" ["${devcnt}"]
  $SMARTCTL -a "${1}" | grep -E "Device Model|Serial Number|User Capacity|Power_On_Hours"
}

if [ ${#DEVS[@]} -eq 0 ]; then
  echo "OK, No ATA/SATA devices found (virtual? hw-raid?)"
  /bin/rm "${OUT}" "${NAGIOS_OUTPUT}"
  exit 0
fi

devcnt=0
for dev in "${DEVS[@]}"
do

  if [[ "${DEBUG}" == "1" ]]; then
    echo "[DEBUG] Checking disk '${dev}'..."
  fi
  if [[ "$RAIDTYPE" != "" ]]; then
    SMARTCTL="smartctl --device=$RAIDTYPE,${devcnt}"
  fi

  errors=$(check_ata_error_count "${dev}")
  health=$(check_health "$@")
  attr1=$(check_attribute "${dev}" "Offline_Uncorrectable")
  attr2=$(check_attribute "${dev}" "Reported_Uncorrect")
  #attr3=$(check_attribute "${dev}" "Seek_Error_Rate")
  #attr4=$(check_attribute "${dev}" "UDMA_CRC_Error_Count")
  #attr5=$(check_attribute "${dev}" "Hardware_ECC_Recovered")
  attr6=$(check_attribute "${dev}" "Reallocated_Sector_Ct")
  attr7=$(check_attribute "${dev}" "Current_Pending_Sector")
  #attr8=$(check_attribute "${dev}" "Media_Wearout_Indicator")
  attr9=$(check_attribute "${dev}" "End-to-End_Error")

  RESULTS[${devcnt}]=0
  if [ -n "${errors}" ]; then
    RESULTS[${devcnt}]=$((RESULTS[devcnt]+errors))
  fi
  if [ -n "${health}"  ]; then
    RESULTS[${devcnt}]=$((RESULTS[devcnt]+health))
  fi
  if [ -n "${attr1}"  ]; then
    RESULTS[${devcnt}]=$((RESULTS[devcnt]+attr1))
  fi
  if [ -n "${attr2}"  ]; then
    RESULTS[${devcnt}]=$((RESULTS[devcnt]+attr2))
  fi
  #if [ -n $attr3  ]; then
  #  RESULTS[${devcnt}]=$((RESULTS[devcnt]+attr3))
  #fi
  #if [ -n $attr4  ]; then
  #  RESULTS[${devcnt}]=$((RESULTS[devcnt]+attr4))
  #fi
  #if [ -n $attr5  ]; then
  #  RESULTS[${devcnt}]=$((RESULTS[devcnt]+attr5))
  #fi
  if [ -n "${attr6}"  ]; then
    RESULTS[${devcnt}]=$((RESULTS[devcnt]+attr6))
  fi
  if [ -n "${attr7}"  ]; then
    RESULTS[${devcnt}]=$((RESULTS[devcnt]+attr7))
  fi
  #if [ -n $attr8  ]; then
  #   RESULTS[${devcnt}]=$((RESULTS[devcnt]+attr8))
  # fi
  if [ -n "${attr9}"  ]; then
    RESULTS[${devcnt}]=$((RESULTS[devcnt]+attr9))
  fi

  if [[ ${RESULTS[${devcnt}]} -gt 0 ]]
  then
    ERRORDEVICES="$ERRORDEVICES ${dev} [${devcnt}]"
  fi
  TOTAL=$((TOTAL+RESULTS[devcnt]))
  ((devcnt++))
done


if [[ $TOTAL -gt 0 ]];
then
  echo "WARNING: SMART Errors found on disks $ERRORDEVICES [TOTAL: $TOTAL]"
  cat "${NAGIOS_OUTPUT}"
  echo ""
  echo "Device info:"
  while read -r disk
  do
    device_info "${disk}"
  done <<< "$(grep ^/dev "${NAGIOS_OUTPUT}" | cut -f1 -d" " | sort -u)"
  /bin/rm "${OUT}" "${NAGIOS_OUTPUT}"
  exit 1
else
  /bin/rm "${OUT}" "${NAGIOS_OUTPUT}"
  #shellcheck disable=SC2068
  echo "OK, no SMART errors found on: $(join_by ', ' ${DEVS[@]})"
fi

